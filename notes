-Distrubuted version control system
-Command line - fastest and easiest and all inclusive
-GUI - GitKraken - free for open source
-GUI - Sourcetree - free for windows or mac

-check git and version
git --version

git bash - emulates linux evironment

-setting
-system - all users of the current computer
-global - all repos of current user
-local - current repo
git config --global user.name "Nate Argaw"
git config --global user.email nateargaw@gmail.com
-no quotes necessary if there is no space

-edit all global settings
git config --global -e

-configure how git handles end of lines for interoprability
-windows - \r (carriage return) and \n (line feed)
-mac and linux - \n (line feed)
git config --global core.autocrlf true (windows)
git config --global core.autocrlf input (mac or linux)

-get help from git 
git config --help (detailed)
git config -h (simple)

-init
mkdir Jelly
cd Jelly
git init
ls -a (show hidden git file)

-staging area - proposed snapshot before recording snapshot
-can unstage snapshot
-commit - snapshot saved in .git file
-commit includes ID, Message, Date/Time, Author and complete snapshot

-example
echo hello > file1.js
echo hello2 > file2.js

-check status
git status  (full status)

-add files to staging area
git add . (all files)
git add *.js (all files ending with .js)
git add file1.js (file1.js only)
git add file1.js file2.js (file1.js and file2.js only)

-see unstaged changes
git add file1.js file2.js (file1.js and file2.js only)
echo world >> file2.js
git status
-shows unstaged changes to file2.js

-commit files (save snapshot)
git commit
-opens a file 
-I for insert
-Type short description (80chars or less)
-Line break
-Type long description 

-commit etiquette
-commit not too much 
-commit not too little
-separate commits for specific portions of code 
-meaningful commit messages
-commit wording present or past tense (most use present tense)

-remove file1.js
rm file1.js
git add file1.js (we add it to the staging area even though we are deleteing the file) 
git commit -m "remove unused code"
-alternatively
git rm file1.js (removes file from directory and staging area)

-rename file2.js
mv file2.js hello.js
-stage both stages
git add file2.js
git add hello.js
git status 
-alternatively
git mv file2.js hello.js (renames file in directory and staging area)

-git ignore
mkdir logs
echo hello > logs/dev.log
-in the root of the project
logs/ > .gitignore
-list any directory (logs/)
-specific files (main.log)
-patterns (*.log)

-previously commited files that need to be ignored by git
mkdir bin
echo test > bin/app.bin
git add .
git commit -m "added a bin dir and file"
bin/ >> .gitignore
git ls-files (shows files in the staging area(index))
-remove file from staging area recursively
git rm --cached -r bin/
git status
git add .gitignore
git commit -m "added bin to git ignore"

git status -s (short)
-left: staging area
-right: working directory
-M: modified
-A: added
?? untracked

-view history
git log
git log --oneline
git log --reverse (oldest to newest)
git log --all --graph

git show HEAD (shows last commit)
git show HEAD~1 (1 step before last commit)
git show HEAD:file.js (show version of file.js)
git ls-tree HEAD~1

-unstage files
git restore --staged file.js
git restore . (discard all local changes except untracked)
git clean -fd (remove untracked files (f - force) (d-directory))
git restore --staged file.js

-create branch
-use case: Not alter master code when working on some test code
git branch feature1 //create a new branch called feature1
git checkout feature1 //switch to the feature1 branch
git checkout master //switch back to master branch

-merge a feature
git checkout master // switch to master first
git merge feature1 -m "merge feature1" //add changes from feature1 to the current branch (master)

-feature branch workflow
1. Create feature branch
git branch new-feature //create new branch called new-feature

2. Upload to Github
-get the github link and add remote
git remote add origin [link] //origin is the nickname of the github repo
-upload master
git checkout master //switch to master branch
git push origin master //push master branch (master) to the github repo (origin)
-upload feature branch
git checkout new-feature //switch to new-feature branch
git push origin new-feature //push new-feature branch (new-feature) to the github repo (origin)

3. Create pull request
-go to pull request tab and click on create pull request
-top bar arrow points in the direction of the merge (new feature points to master branch)
-add title of the pull request
-add description of the pull request
-submit pull request
-code reviewer can look at code for code review
-comments and conversation 

4. Merge feature branch
-clik on merge pull request
-done by the code-reviewer

-finally update master branch in local repo
git checkout master //switch to master branch
git pull origin master//get the new merged code from origin to the master branch

-delete a branch
git branch -D new-feature
